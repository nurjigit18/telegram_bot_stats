from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from constants import PROMPTS, STEPS
from models.user_data import user_data
from utils.validators import validate_date, validate_amount, validate_size_amounts, parse_size_amounts, standardize_date, validate_warehouse_sizes
from utils.google_sheets import save_to_sheets, GoogleSheetsManager
from config import ADMIN_USER_USERNAMES
from datetime import datetime
import logging
import re
import pytz

logger = logging.getLogger(__name__)

def parse_warehouse_sizes(warehouse_sizes_str):
    """
    Parse warehouse and sizes string into structured data with robust input handling
    
    Formats supported:
    - Single warehouse: "–ö–∞–∑–∞–Ω—å: S-50 M-25 L-25" or "–ö–∞–∑–∞–Ω—å:S-50 M-25 L-25"
    - Multiple warehouses: "–ö–∞–∑–∞–Ω—å: S-30 M-40 , –ú–æ—Å–∫–≤–∞: L-50 XL-80" or "–ö–∞–∑–∞–Ω—å:S-30 M-40,–ú–æ—Å–∫–≤–∞:L-50 XL-80"
    - Handles missing spaces after colons and commas
    - Handles missing spaces between sizes
    - Case insensitive size names
    - Handles mixed Latin/Cyrillic characters in warehouse names
    
    Returns: List of tuples [(warehouse_name, {size: quantity})]
    """
    try:
        # Step 1: Clean and normalize the input string
        cleaned_str = normalize_warehouse_input(warehouse_sizes_str)
        
        warehouse_data = []
        
        # Step 2: Split by comma for multiple warehouses (now properly spaced)
        warehouse_parts = [part.strip() for part in cleaned_str.split(',') if part.strip()]
        
        for warehouse_part in warehouse_parts:
            if ':' not in warehouse_part:
                return None  # Invalid format
            
            # Step 3: Split warehouse name and sizes
            warehouse_name, sizes_str = warehouse_part.split(':', 1)
            warehouse_name = warehouse_name.strip()
            sizes_str = sizes_str.strip()
            
            # Step 4: Parse sizes with robust splitting
            sizes = parse_sizes_string(sizes_str)
            if not sizes:
                return None  # Invalid sizes format
            
            warehouse_data.append((warehouse_name, sizes))
        
        return warehouse_data if warehouse_data else None
        
    except Exception as e:
        logger.error(f"Error parsing warehouse sizes: {e}")
        return None
    
def normalize_warehouse_input(input_str):
    """
    Normalize warehouse input string by adding missing spaces and cleaning format
    Handles both Latin and Cyrillic characters with improved regex patterns
    """
    # Remove extra whitespace
    cleaned = re.sub(r'\s+', ' ', input_str.strip())
    
    # Add space after colon if missing: "–°–∫–ª–∞–¥:—Ä–∞–∑–º–µ—Ä—ã" -> "–°–∫–ª–∞–¥: —Ä–∞–∑–º–µ—Ä—ã"
    # Handle both Latin and Cyrillic characters
    cleaned = re.sub(r'([^\s:]):([^\s])', r'\1: \2', cleaned)
    
    # Add space after comma if missing: "—Ä–∞–∑–º–µ—Ä—ã,–°–∫–ª–∞–¥" -> "—Ä–∞–∑–º–µ—Ä—ã, –°–∫–ª–∞–¥"
    cleaned = re.sub(r'([^\s,]),([^\s])', r'\1, \2', cleaned)
    
    # Fix cases where sizes are stuck together with warehouse names or other sizes
    # This handles cases like "Ty–ªa: XS-47 S-80" or "XS-52S-37M-34"
    # First, handle sizes stuck to warehouse names after colon
    cleaned = re.sub(r'(:)([A-Za-z–ê-–Ø–∞-—è0-9]+)(-\d+)([A-Za-z–ê-–Ø–∞-—è0-9]+)(-\d+)', r'\1\2\3 \4\5', cleaned)
    
    # Then handle multiple consecutive stuck sizes
    # Keep applying the fix until no more changes are made
    prev_cleaned = ""
    max_iterations = 20  # Prevent infinite loops
    iteration = 0
    
    while prev_cleaned != cleaned and iteration < max_iterations:
        prev_cleaned = cleaned
        # Handle pattern like "XS-52S-37M-34L-36XL-20"
        cleaned = re.sub(r'([A-Za-z–ê-–Ø–∞-—è0-9]+)-(\d+)([A-Za-z–ê-–Ø–∞-—è0-9]+)-(\d+)', r'\1-\2 \3-\4', cleaned)
        iteration += 1
    
    return cleaned

def parse_sizes_string(sizes_str):
    """
    Parse sizes string into dictionary with robust handling.
    Handles formats like: "S-50 M-25 L-25" or "s-50m-25l-25" or "S-50M-25L-25"
    Supports both Latin and Cyrillic characters, case insensitive.
    """
    sizes = {}

    # Regex finds all size-quantity pairs like 'xs-52', '2xl-1', etc.
    pattern = r'([a-zA-Z–∞-—è–ê-–Ø0-9]+)-(\d+)'
    matches = re.findall(pattern, sizes_str)
    if not matches:
        return None

    valid_sizes = {
        # English sizes
        'XS': 'XS', 'S': 'S', 'M': 'M', 'L': 'L', 'XL': 'XL',
        '2XL': '2XL', '3XL': '3XL', '4XL': '4XL', '5XL': '5XL',
        '6XL': '6XL', '7XL': '7XL',
        # Russian equivalents
        '–•–°': 'XS', '–°': 'S', '–ú': 'M', '–õ': 'L', '–•–õ': 'XL',
        '2–•–õ': '2XL', '3–•–õ': '3XL', '4–•–õ': '4XL', '5–•–õ': '5XL',
        '6–•–õ': '6XL', '7–•–õ': '7XL',
        # Mixed common variations
        'X–°': 'XS', '–°S': 'S', '–•S': 'XS', 'X–õ': 'XL', '–õL': 'L',
        'XXL': 'XL', 'XXXL': '3XL'
    }

    for size, qty in matches:
        size = size.strip().upper()
        if size in valid_sizes:
            std_size = valid_sizes[size]
            try:
                quantity = int(qty)
                if quantity > 0:
                    sizes[std_size] = quantity
            except ValueError:
                continue  # skip invalid quantities
        else:
            continue  # skip unknown sizes

    return sizes if sizes else None


def validate_warehouse_sizes_enhanced(warehouse_sizes_str):
    """
    Enhanced validation for warehouse sizes string with better error reporting
    """
    if not warehouse_sizes_str or not warehouse_sizes_str.strip():
        return False, "–°—Ç—Ä–æ–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞"
    
    try:
        # Try to parse the warehouse sizes
        parsed_data = parse_warehouse_sizes(warehouse_sizes_str)
        if parsed_data is None:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–∫–ª–∞–¥–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤"
        if len(parsed_data) == 0:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞"
        
        # Additional validation: check if all warehouses have valid sizes
        for warehouse_name, sizes in parsed_data:
            if not sizes:
                return False, f"–°–∫–ª–∞–¥ '{warehouse_name}' –Ω–µ –∏–º–µ–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"
        
        return True, None
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ: {str(e)}"

def setup_save_handler(bot: TeleBot):
    @bot.message_handler(commands=['save'])
    def start_save_process(message):
        """Start the product data collection process with single message input"""
        user_id = message.from_user.id

        # Initialize user data
        user_data.initialize_user(user_id)
        user_data.set_current_action(user_id, "saving_new_single")
        user_data.initialize_form_data(user_id)

        # Send sample format
        sample_format = (
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "üìã –û–±—Ä–∞–∑–µ—Ü –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è:\n"
            "–¶–≤–µ—Ç –∏–∑–¥–µ–ª–∏—è:\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç):\n"
            "–°–∫–ª–∞–¥—ã –∏ —Ä–∞–∑–º–µ—Ä—ã:\n"
            "–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–¥/–º–º/–≥–≥–≥–≥):\n"
            "–î–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–¥/–º–º/–≥–≥–≥–≥):\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã:\n\n"
            "üîπ –û–¥–∏–Ω —Å–∫–ª–∞–¥:\n"
            "—Ä—É–±–∞—à–∫–∞\n"
            "–∫—Ä–∞—Å–Ω—ã–π\n"
            "100\n"
            "–ö–∞–∑–∞–Ω—å: S-50 M-25 L-25\n"
            "12.12.2021\n"
            "15/12/2021\n\n"
            "üîπ –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤:\n"
            "—Ä—É–±–∞—à–∫–∞\n"
            "—Å–∏–Ω–∏–π\n"
            "200\n"
            "–ö–∞–∑–∞–Ω—å: S-30 M-40 , –ú–æ—Å–∫–≤–∞: L-50 XL-80\n"
            "12.12.2021\n"
            "15/12/2021\n\n"
            "üìù –§–æ—Ä–º–∞—Ç —Å–∫–ª–∞–¥–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤:\n"
            "‚Ä¢ –û–¥–∏–Ω —Å–∫–ª–∞–¥: –°–∫–ª–∞–¥: —Ä–∞–∑–º–µ—Ä-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤: –°–∫–ª–∞–¥1: —Ä–∞–∑–º–µ—Ä—ã , –°–∫–ª–∞–¥2: —Ä–∞–∑–º–µ—Ä—ã\n"
            "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–∫–ª–∞–¥–æ–≤: , (–∑–∞–ø—è—Ç–∞—è)\n"
            "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä–æ–≤: - (–¥–µ—Ñ–∏—Å)\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–º–µ—Ä—ã: XS, S, M, L, XL, 2XL, 3XL, 4XL, 5XL, 6XL, 7XL\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."
        )
        bot.reply_to(message, sample_format)

    @bot.message_handler(func=lambda message:
        user_data.has_user(message.from_user.id) and
        user_data.get_current_action(message.from_user.id) == "saving_new_single")
    def handle_single_save_input(message):
        """Handle single message input for all form data"""
        if message.text.startswith('/'):  # Skip if it's a command
            if message.text == '/cancel':
                user_data.clear_user_data(message.from_user.id)
                bot.reply_to(message, "‚úñÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        user_id = message.from_user.id
        
        try:
            # Parse the input message
            lines = [line.strip() for line in message.text.strip().split('\n') if line.strip()]
            
            # Check if we have the correct number of lines
            expected_fields = 6
            if len(lines) != expected_fields:
                error_msg = (
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_fields} —Å—Ç—Ä–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ {len(lines)}.\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:\n"
                    "1. –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è\n"
                    "2. –¶–≤–µ—Ç –∏–∑–¥–µ–ª–∏—è\n"
                    "3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç)\n"
                    "4. –°–∫–ª–∞–¥—ã –∏ —Ä–∞–∑–º–µ—Ä—ã\n"
                    "5. –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
                    "6. –î–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–±—ã—Ç–∏—è"
                )
                bot.reply_to(message, error_msg)
                return

            # Extract and validate each field
            product_name = lines[0]
            product_color = lines[1]
            total_amount_str = lines[2]
            warehouse_sizes_str = lines[3]
            shipment_date_str = lines[4]
            estimated_arrival_str = lines[5]

            errors = []

            # Validate product name
            if not product_name:
                errors.append("‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

            # Validate product color
            if not product_color:
                errors.append("‚Ä¢ –¶–≤–µ—Ç –∏–∑–¥–µ–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

            # Validate total amount
            if not validate_amount(total_amount_str):
                errors.append("‚Ä¢ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            else:
                total_amount = int(total_amount_str)

            # Validate warehouse and sizes format
            is_valid, error_msg = validate_warehouse_sizes_enhanced(warehouse_sizes_str)
            if not is_valid:
                errors.append(f"‚Ä¢ {error_msg}")
            else:
                warehouse_data = parse_warehouse_sizes(warehouse_sizes_str)
                if not warehouse_data:
                    errors.append("‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–∫–ª–∞–¥–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
                else:
                    # Validate that total amounts match
                    calculated_total = sum(sum(sizes.values()) for _, sizes in warehouse_data)
                    if calculated_total != total_amount:
                        errors.append(f"‚Ä¢ –°—É–º–º–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ ({calculated_total}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º ({total_amount})")
                        
                        # Provide detailed breakdown for debugging
                        breakdown = []
                        for warehouse_name, sizes in warehouse_data:
                            warehouse_total = sum(sizes.values())
                            size_details = ", ".join([f"{size}:{qty}" for size, qty in sizes.items()])
                            breakdown.append(f"  {warehouse_name}: {size_details} = {warehouse_total}")
                        
                        errors.append("–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º:\n" + "\n".join(breakdown))

            # Validate shipment date
            if not validate_date(shipment_date_str):
                errors.append("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥/–º–º/–≥–≥–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥")
            else:
                shipment_date = standardize_date(shipment_date_str)

            # Validate estimated arrival date
            if not validate_date(estimated_arrival_str):
                errors.append("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—Ä–∏–±—ã—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥/–º–º/–≥–≥–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥")
            else:
                estimated_arrival = standardize_date(estimated_arrival_str)

            # If there are validation errors, send them back
            if errors:
                error_message = "‚ùå –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n\n" + "\n".join(errors)
                error_message += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ."
                bot.reply_to(message, error_message)
                return

            # If validation passed, save the data
            # For multiple warehouses, we'll create multiple records
            saved_records = 0
            warehouse_records = []  # Keep track of what was saved for confirmation
            
            for warehouse_name, sizes in warehouse_data:
                # Clear previous form data to avoid contamination between warehouses
                user_data.initialize_form_data(user_id)
                
                # Set the basic form data for this specific warehouse
                user_data.update_form_data(user_id, 'product_name', product_name)
                user_data.update_form_data(user_id, 'product_color', product_color)
                user_data.update_form_data(user_id, 'total_amount', sum(sizes.values()))  # Amount for this warehouse only
                user_data.update_form_data(user_id, 'warehouse', warehouse_name)
                user_data.update_form_data(user_id, 'shipment_date', shipment_date)
                user_data.update_form_data(user_id, 'estimated_arrival', estimated_arrival)

                # Add size amounts to form data for this specific warehouse
                for size_key, size_value in sizes.items():
                    user_data.update_form_data(user_id, size_key, size_value)

                # Save to Google Sheets for this warehouse
                try:
                    row_index = save_to_sheets(bot, message)
                    saved_records += 1
                    warehouse_records.append((warehouse_name, sizes))
                    
                    # Notify admins about the new record
                    notify_admins_about_new_record(bot, message, row_index)
                    
                    logger.info(f"Successfully saved record for warehouse {warehouse_name} with sizes: {sizes}")
                    
                except Exception as e:
                    logger.error(f"Error saving warehouse {warehouse_name}: {str(e)}")
                    bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}: {str(e)}")
                    user_data.clear_user_data(user_id)
                    return

            # Show confirmation message with all saved data
            warehouse_summary = []
            for warehouse_name, sizes in warehouse_records:
                size_str = ", ".join([f"{size}: {qty}" for size, qty in sizes.items()])
                warehouse_summary.append(f"üè™ {warehouse_name}: {size_str}")

            confirmation_msg = (
                "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è: {product_name}\n"
                f"üé® –¶–≤–µ—Ç –∏–∑–¥–µ–ª–∏—è: {product_color}\n"
                f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_amount} —à—Ç\n"
                + "\n".join(warehouse_summary) + "\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {shipment_date}\n"
                f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {estimated_arrival}\n\n"
                f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {saved_records}"
            )
            bot.reply_to(message, confirmation_msg)

            # Clear user data after successful completion
            user_data.clear_user_data(user_id)

        except Exception as e:
            logger.error(f"Error in handle_single_save_input: {str(e)}")
            bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            user_data.clear_user_data(user_id)

    def notify_admins_about_new_record(bot, message, row_index):
        """Notify all admins about a new record being added to Google Sheets"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name or f"User ID: {user_id}"

            # Get the sheet manager and worksheet
            sheets_manager = GoogleSheetsManager.get_instance()
            worksheet = sheets_manager.get_main_worksheet()

            # Get the current record to include in the notification
            record = worksheet.row_values(row_index)

            # Extract relevant information
            product_name = record[3] if len(record) > 3 else "Unknown product"
            product_color = record[7] if len(record) > 7 else "Unknown color"
            shipment_date = record[4] if len(record) > 4 else "Unknown date"
            estimated_arrival = record[5] if len(record) > 5 else "Unknown date"
            total_amount = record[8] if len(record) > 8 else "Unknown amount"
            warehouse_name = record[9] if len(record) > 9 else "Unknown warehouse"
            
            # Extract sizes and create compact display
            size_mapping = {10: 'XS', 11: 'S', 12: 'M', 13: 'L', 14: 'XL', 15: '2XL', 16: '3XL', 17: '4XL', 18: '5XL', 19: '6XL', 20: '7XL'}
            active_sizes = []

            for col_idx, size_name in size_mapping.items():
                if len(record) > col_idx and record[col_idx]:
                    qty = str(record[col_idx]).strip()
                    if qty and qty != '0':
                        active_sizes.append(f"{size_name}({qty})")

            sizes_text = ", ".join(active_sizes) if active_sizes else "‚Äî"

            notification_text = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"–ò–∑–¥–µ–ª–∏–µ: {product_name}\n"
                f"–¶–≤–µ—Ç: {product_color}\n"
                f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {shipment_date}\n"
                f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {estimated_arrival}\n"
                f"–°–∫–ª–∞–¥: {warehouse_name}\n"
                f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_amount}\n"
                f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}\n"
                f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {datetime.now(pytz.timezone('Asia/Bishkek')).strftime('%Y-%m-%d %H:%M:%S')}"
            )

            # Send notification to each admin
            for admin_username in ADMIN_USER_USERNAMES:
                try:
                    # Get the admin's chat_id from the users worksheet
                    users_worksheet = sheets_manager.get_users_worksheet()
                    all_users = users_worksheet.get_all_values()

                    # Find admin's chat_id by username
                    admin_chat_id = None
                    for user_row in all_users[1:]:  # Skip header
                        if len(user_row) > 1 and user_row[1] == admin_username:
                            admin_chat_id = int(user_row[0])
                            break

                    if admin_chat_id:
                        bot.send_message(admin_chat_id, notification_text)
                        logger.info(f"New record notification sent to admin {admin_username}")
                    else:
                        logger.warning(f"Admin {admin_username} not found in users worksheet")
                except Exception as admin_error:
                    logger.error(f"Failed to notify admin {admin_username}: {str(admin_error)}")
        except Exception as e:
            logger.error(f"Error notifying admins about new record: {str(e)}")
            # This error shouldn't prevent the user from completing their task
            # so we just log it and don't send any error message to the user

    @bot.message_handler(commands=['cancel'])
    def cancel_save_process(message):
        """Cancel the save process"""
        user_id = message.from_user.id
        if user_data.has_user(user_id):
            user_data.clear_user_data(user_id)
            bot.reply_to(message, "‚úñÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")