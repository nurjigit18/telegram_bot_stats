# save.py ‚Äî warehouse-centric shipment flow replacing previous single-message save handler
# -*- coding: utf-8 -*-

from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from models.user_data import user_data
from utils.google_sheets import save_to_sheets, GoogleSheetsManager
from utils.validators import validate_date, standardize_date
from config import ADMIN_USER_USERNAMES
from datetime import datetime
import pytz
import re
import logging

logger = logging.getLogger(__name__)

# ===================== Parsing utilities (colors ‚Üí sizes) ====================
SIZE_MAP = {
    'XS':'XS','S':'S','M':'M','L':'L','XL':'XL',
    '2XL':'2XL','3XL':'3XL','4XL':'4XL','5XL':'5XL','6XL':'6XL','7XL':'7XL',
    # Cyrillic equivalents
    '–•–°':'XS','–°':'S','–ú':'M','–õ':'L','–•–õ':'XL',
    '2–•–õ':'2XL','3–•–õ':'3XL','4–•–õ':'4XL','5–•–õ':'5XL','6–•–õ':'6XL','7–•–õ':'7XL',
    # Common mixes
    'X–°':'XS','–•S':'XS','X–õ':'XL', 'XXL':'XL','XXXL':'3XL'
}

DASH_PATTERN = r"[-‚Äì‚Äî:]"
SIZE_PAIR_RE = re.compile(rf"([A-Za-z–ê-–Ø–∞-—è0-9]+)\s*{DASH_PATTERN}\s*(\d+)")
COLOR_BLOCK_RE = re.compile(r"(?P<color>[^,:;\n]+?)\s*:\s*(?P<sizes>.*?)(?=(?:[^,:;\n]+?\s*:)|$)")


def _normalize_colors_input(s: str) -> str:
    if not s:
        return ''
    s = s.strip()
    s = re.sub(r"[ \t]+", " ", s)
    s = re.sub(r"\s*,\s*", ", ", s)
    s = re.sub(r"\s*;\s*", "; ", s)
    s = s.replace('‚Äî','-').replace('‚Äì','-')
    # Unstick pairs like "S-10M-20" -> "S-10 M-20"
    prev = None
    for _ in range(20):
        if prev == s:
            break
        prev = s
        s = re.sub(r"([A-Za-z–ê-–Ø–∞-—è0-9]+)-(\d+)([A-Za-z–ê-–Ø–∞-—è0-9]+)-(\d+)", r"\1-\2 \3-\4", s)
    return s


def _canon_size(raw: str):
    key = raw.strip().upper()
    return SIZE_MAP.get(key, key if key in SIZE_MAP.values() else None)


def parse_colors_and_sizes(input_text: str):
    """Parse "–¶–≤–µ—Ç: size-qty ‚Ä¶, –¶–≤–µ—Ç2: ‚Ä¶" into { color: {size: qty} }.
    Returns (data: dict, errors: list[str], normalized_preview: str)
    """
    errors = []
    if not input_text or not input_text.strip():
        return None, ["–°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞–º–∏ –ø—É—Å—Ç–∞."], ''

    text = _normalize_colors_input(input_text)
    result = {}

    for m in COLOR_BLOCK_RE.finditer(text):
        color = m.group('color').strip()
        sizes_str = m.group('sizes').strip()
        if not color:
            errors.append("–ù–∞–π–¥–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ (–¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è).")
            continue

        size_map = {}
        for size_raw, qty_raw in SIZE_PAIR_RE.findall(sizes_str):
            c = _canon_size(size_raw)
            if not c:
                errors.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äò{size_raw}‚Äô —É —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ ‚Äò{color}‚Äô. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue
            try:
                q = int(qty_raw)
                if q <= 0:
                    errors.append(f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {c} —É ‚Äò{color}‚Äô: {qty_raw}. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                    continue
            except ValueError:
                errors.append(f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {c} —É ‚Äò{color}‚Äô: {qty_raw}. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue
            size_map[c] = size_map.get(c, 0) + q

        if not size_map:
            errors.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä —Ä–∞–∑–º–µ—Ä-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ ‚Äò{color}‚Äô.")
        else:
            result[color] = size_map

    if not result:
        return None, errors or ["–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏."], ''

    # Build normalized preview
    def size_order_key(k: str):
        base = {"XS":0,"S":1,"M":2,"L":3,"XL":4}
        if k in base: return (0, base[k])
        if k.endswith("XL") and k[:-2].isdigit():
            return (1, int(k[:-2]))
        return (2, 0)

    parts = []
    for color, smap in result.items():
        pairs = [f"{k}-{smap[k]}" for k in sorted(smap.keys(), key=size_order_key)]
        parts.append(f"{color}: " + " ".join(pairs))
    preview = ", ".join(parts)
    return result, errors, preview


# ===================== Conversation state keys ==============================
STATE_KEY = "shipment_state"
STATE_STEP = "step"
STATE_WAREHOUSE = "warehouse"
STATE_MODELS = "models"            # list[{model_name, colors{color:{size:qty}}}]
STATE_SHIP_DATE = "ship_date"
STATE_ETA_DATE = "eta_date"
CURRENT_MODEL = "current_model"

STEP_WAREHOUSE = "ask_warehouse"
STEP_MODEL = "ask_model"
STEP_COLORS = "ask_colors"
STEP_SHIPDATE = "ask_shipdate"
STEP_ETADATE = "ask_etadate"
STEP_CONFIRM = "confirm"


# ===================== UI helpers ==========================================

def _kb_confirm():
    m = InlineKeyboardMarkup()
    m.add(InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="ship_save_all"))
    m.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="ship_add_model"))
    m.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ship_cancel"))
    return m


def _format_confirmation(state: dict) -> str:
    wh = state.get(STATE_WAREHOUSE, "‚Äî")
    ship = state.get(STATE_SHIP_DATE, "‚Äî")
    eta = state.get(STATE_ETA_DATE, "‚Äî")

    lines = [
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:",
        f"–°–∫–ª–∞–¥: {wh}",
    ]

    total_all = 0

    for item in state.get(STATE_MODELS, []):
        model = item.get("model_name", "‚Äî")
        colors = item.get("colors", {})
        color_parts = []
        for color, sizes in colors.items():
            qty = sum(sizes.values())
            total_all += qty
            spairs = " ".join([f"{k}-{v}" for k, v in sizes.items()])
            color_parts.append(f"{color}: {spairs}")
        color_preview = ", ".join(color_parts) if color_parts else "‚Äî"
        lines.append(f"–ú–æ–¥–µ–ª—å: {model}")
        lines.append(f"–†–∞—Å—Ü–≤–µ—Ç–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä—ã: {color_preview}")
        lines.append("")

    lines.append(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_all} —à—Ç")
    lines.append(f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {ship}")
    lines.append(f"–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ): {eta}")

    return "\n".join(lines)


# ===================== Admin notification ==================================

def _notify_admins_about_new_record(bot: TeleBot, row_index: int, source_username: str):
    try:
        sheets_manager = GoogleSheetsManager.get_instance()
        ws = sheets_manager.get_main_worksheet()
        record = ws.row_values(row_index)

        product_name = record[3] if len(record) > 3 else "Unknown product"
        product_color = record[7] if len(record) > 7 else "Unknown color"
        shipment_date = record[4] if len(record) > 4 else "Unknown date"
        estimated_arrival = record[5] if len(record) > 5 else "Unknown date"
        total_amount = record[8] if len(record) > 8 else "Unknown amount"
        warehouse_name = record[9] if len(record) > 9 else "Unknown warehouse"

        size_mapping = {10: 'XS', 11: 'S', 12: 'M', 13: 'L', 14: 'XL', 15: '2XL', 16: '3XL', 17: '4XL', 18: '5XL', 19: '6XL', 20: '7XL'}
        active_sizes = []
        for col_idx, size_name in size_mapping.items():
            if len(record) > col_idx and record[col_idx]:
                qty = str(record[col_idx]).strip()
                if qty and qty != '0':
                    active_sizes.append(f"{size_name}({qty})")
        sizes_text = ", ".join(active_sizes) if active_sizes else "‚Äî"

        text = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{source_username}\n"
            f"–ò–∑–¥–µ–ª–∏–µ: {product_name}\n"
            f"–¶–≤–µ—Ç: {product_color}\n"
            f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {shipment_date}\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {estimated_arrival}\n"
            f"–°–∫–ª–∞–¥: {warehouse_name}\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_amount}\n"
            f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}\n"
            f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {datetime.now(pytz.timezone('Asia/Bishkek')).strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # Resolve admin chat ids from Users sheet by username
        try:
            users_ws = sheets_manager.get_users_worksheet()
            all_users = users_ws.get_all_values()
        except Exception:
            all_users = []

        for admin_username in ADMIN_USER_USERNAMES:
            admin_chat_id = None
            for row in all_users[1:]:
                if len(row) > 1 and row[1] == admin_username:
                    try:
                        admin_chat_id = int(row[0])
                        break
                    except Exception:
                        pass
            if admin_chat_id:
                try:
                    bot.send_message(admin_chat_id, text)
                except Exception as e:
                    logger.warning(f"Failed to notify admin {admin_username}: {e}")
    except Exception as e:
        logger.error(f"Admin notify error: {e}")


# ===================== Main handler (replaces previous /save) ===============

def setup_save_handler(bot: TeleBot):
    @bot.message_handler(commands=['save'])
    def start_flow(message):
        uid = message.from_user.id
        user_data.initialize_user(uid)
        st = {
            STATE_STEP: STEP_WAREHOUSE,
            STATE_WAREHOUSE: None,
            STATE_MODELS: [],
            STATE_SHIP_DATE: None,
            STATE_ETA_DATE: None,
        }
        user_data.update_user_data(uid, STATE_KEY, st)
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–ª–∞–¥:")

    @bot.message_handler(func=lambda m: user_data.get_user_data(m.from_user.id) and user_data.get_user_data(m.from_user.id).get(STATE_KEY) is not None)
    def handle_text(message):
        uid = message.from_user.id
        st = user_data.get_user_data(uid).get(STATE_KEY, {})
        step = st.get(STATE_STEP)
        text = (message.text or '').strip()

        # Allow cancel
        if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
            user_data.update_user_data(uid, STATE_KEY, None)
            bot.reply_to(message, "‚úñÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
            return

        if step == STEP_WAREHOUSE:
            if not text:
                bot.reply_to(message, "–°–∫–ª–∞–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–∫–ª–∞–¥:")
                return
            st[STATE_WAREHOUSE] = text
            st[STATE_STEP] = STEP_MODEL
            user_data.update_user_data(uid, STATE_KEY, st)
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–∫–µ—Ç–µ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞ —Ä–∞–∑):")
            return

        if step == STEP_MODEL:
            if not text:
                bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:")
                return
            st[CURRENT_MODEL] = text
            st[STATE_STEP] = STEP_COLORS
            user_data.update_user_data(uid, STATE_KEY, st)
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –∫–∞–∂–¥—É—é —Ä–∞—Å—Ü–≤–µ—Ç–∫—É, –ø—Ä–∏–º–µ—Ä: –®–æ–∫–æ–ª–∞–¥: S-10 XL-10 3XL-20, –ö—Ä–∞—Å–Ω—ã–π: M-10 xl-20")
            return

        if step == STEP_COLORS:
            colors, errs, preview = parse_colors_and_sizes(text)
            if not colors:
                err = "\n".join(["‚ùå –û—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:"] + errs + ["\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ –ø—Ä–∏–º–µ—Ä—É."])
                bot.reply_to(message, err)
                return
            st.setdefault(STATE_MODELS, []).append({
                "model_name": st.get(CURRENT_MODEL),
                "colors": colors,
            })
            if not st.get(STATE_SHIP_DATE):
                st[STATE_STEP] = STEP_SHIPDATE
                user_data.update_user_data(uid, STATE_KEY, st)
                bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–∏–º–µ—Ä (–¥–¥.–º–º.–≥–≥ –∏–ª–∏ –¥–¥/–º–º/–≥–≥):")
                return
            st[STATE_STEP] = STEP_CONFIRM
            user_data.update_user_data(uid, STATE_KEY, st)
            bot.send_message(message.chat.id, _format_confirmation(st), reply_markup=_kb_confirm())
            return

        if step == STEP_SHIPDATE:
            if not validate_date(text):
                bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥ –∏–ª–∏ –¥–¥/–º–º/–≥–≥")
                return
            st[STATE_SHIP_DATE] = standardize_date(text)
            st[STATE_STEP] = STEP_ETADATE
            user_data.update_user_data(uid, STATE_KEY, st)
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–∏–º–µ—Ä (–¥–¥.–º–º.–≥–≥ –∏–ª–∏ –¥–¥/–º–º/–≥–≥):")
            return

        if step == STEP_ETADATE:
            if not validate_date(text):
                bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥ –∏–ª–∏ –¥–¥/–º–º/–≥–≥")
                return
            st[STATE_ETA_DATE] = standardize_date(text)
            st[STATE_STEP] = STEP_CONFIRM
            user_data.update_user_data(uid, STATE_KEY, st)
            bot.send_message(message.chat.id, _format_confirmation(st), reply_markup=_kb_confirm())
            return

        if step == STEP_CONFIRM:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=_kb_confirm())
            return

    @bot.callback_query_handler(func=lambda c: c.data in {"ship_save_all","ship_add_model","ship_cancel"})
    def on_cb(call):
        uid = call.from_user.id
        st = user_data.get_user_data(uid).get(STATE_KEY)
        if not st:
            bot.answer_callback_query(call.id)
            try:
                bot.edit_message_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /save", call.message.chat.id, call.message.message_id)
            except Exception:
                bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /save")
            return

        bot.answer_callback_query(call.id)
        data = call.data

        if data == "ship_cancel":
            user_data.update_user_data(uid, STATE_KEY, None)
            try:
                bot.edit_message_text("‚úñÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.", call.message.chat.id, call.message.message_id)
            except Exception:
                bot.send_message(call.message.chat.id, "‚úñÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
            return

        if data == "ship_add_model":
            st.pop(CURRENT_MODEL, None)
            st[STATE_STEP] = STEP_MODEL
            user_data.update_user_data(uid, STATE_KEY, st)
            try:
                bot.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–∫–µ—Ç–µ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞ —Ä–∞–∑):", call.message.chat.id, call.message.message_id)
            except Exception:
                bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–∫–µ—Ç–µ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞ —Ä–∞–∑):")
            return

        if data == "ship_save_all":
            try:
                saved = 0
                src_username = call.from_user.username or call.from_user.first_name or str(call.from_user.id)
                for item in st.get(STATE_MODELS, []):
                    model_name = item.get("model_name")
                    for color, sizes in item.get("colors", {}).items():
                        total_amount = sum(sizes.values())
                        # Prepare form_data for save_to_sheets
                        user_data.initialize_form_data(uid)
                        user_data.update_form_data(uid, 'product_name', model_name)
                        user_data.update_form_data(uid, 'product_color', color)
                        user_data.update_form_data(uid, 'total_amount', total_amount)
                        user_data.update_form_data(uid, 'warehouse', st.get(STATE_WAREHOUSE))
                        user_data.update_form_data(uid, 'shipment_date', st.get(STATE_SHIP_DATE))
                        user_data.update_form_data(uid, 'estimated_arrival', st.get(STATE_ETA_DATE))
                        for sz, qty in sizes.items():
                            user_data.update_form_data(uid, sz, qty)
                        row_index = save_to_sheets(bot, call.message)
                        _notify_admins_about_new_record(bot, row_index, src_username)
                        saved += 1

                try:
                    bot.edit_message_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {saved}", call.message.chat.id, call.message.message_id)
                except Exception:
                    bot.send_message(call.message.chat.id, f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {saved}")
            except Exception as e:
                logger.error(f"Error saving shipment: {e}")
                try:
                    bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", call.message.chat.id, call.message.message_id)
                except Exception:
                    bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            finally:
                user_data.update_user_data(uid, STATE_KEY, None)
            return

    @bot.message_handler(commands=['cancel'])
    def cancel_save_process(message):
        uid = message.from_user.id
        if user_data.get_user_data(uid) and user_data.get_user_data(uid).get(STATE_KEY):
            user_data.update_user_data(uid, STATE_KEY, None)
            bot.reply_to(message, "‚úñÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
